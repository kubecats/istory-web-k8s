#6
name: istory-k8s-dev
on:
  push:
    branches: [ "main" ]
permissions:
  contents: read
  actions: read
  packages: write
jobs:
  build:
    if: contains(github.event.head_commit.message, '[deploy-dev]')
    runs-on: ubuntu-latest
    environment: k8s-dev
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/istory
      DOCKER_TAG: ${{ github.run_number }}
    services:
      mysql:
        image: mysql:8.0
        env:
          # root 계정 비밀번호
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }} 
          # 사용자 계정
          MYSQL_USER: ${{ secrets.MYSQL_USER }} # user
          # 사용자 계정 비밀번호
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          # 사용자 계정 데이터베이스
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }} # istory
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: 1.소스코드 다운로드
        uses: actions/checkout@v4 

      - name: 2.JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: 3.개발용 application.yml 생성
        run: |
          cat > src/main/resources/application.yml << EOF
          spring:
            datasource:
              url: ${{ secrets.DATABASE_URL }} # 예dbc:mysql://localhost:3306/istory
              username: ${{ secrets.MYSQL_USER }}
              password: ${{ secrets.MYSQL_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              database-platform: org.hibernate.dialect.MySQL8Dialect
              hibernate:
                ddl-auto: update
              show-sql: true
            application:
              name: USER-SERVICE
            jwt:
              issuer: user@gmail.com
              secret_key: study-springboot
          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always
          EOF

      - name: 4.Setup Gradle
        uses: gradle/gradle-build-action@v2
        
      - name: 5.Build with Gradle
        run: ./gradlew build -x test

      - name: 6.Docker 디렉토리로 jar 파일 복사
        run: |
          mkdir -p xinfra/docker/build/libs/
          cp build/libs/*.jar xinfra/docker/
          ls xinfra/docker/

      - name: 7.Docker Image Build
        run: docker build ./xinfra/docker -t ${{ secrets.DOCKER_USERNAME }}/istory:${{ env.DOCKER_TAG }} -f ./xinfra/docker/Dockerfile

      - name: 8.Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          logout: true

      - name: 9.Docker Push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/istory:${{ env.DOCKER_TAG }}
          
      # 서비스 리포지토리 체크아웃
      - name: 10.서비스 리포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          repository: kubecats/istory-platform   # 바꾸기
          ref: main # 바꾸기
          path: .
          token: ${{ secrets.GIT_PAT }}
      - name: 2..env.secret 파일 생성 (k8s-dev for Kustomize)
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> overlay/aws-dev/.env.secret
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> overlay/aws-dev/.env.secret
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> overlay/aws-dev/.env.secret
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> overlay/aws-dev/.env.secret

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          - name: Install kubectl
      - name: Install AWS CLI
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Install AWS CLI
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name your-cluster-name        


      # # 이미지 태그 업데이트.
      # - name: 11.쿠버네티스 매니페스트 파일 이미지 태그 업데이트 with Kustomize
      #   run: |
      #     # Ensure kustomize is installed
      #     curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
      #     # Build the kustomize configuration
      #     ./kustomize build overlay/aws-dev -o istory-app-deploy.yaml

    #   - name: 11.쿠버네티스 매니페스트 파일 이미지 태그 업데이트
    #     run: |
    #       # 파일이 존재하는지 확인
    #       # ls -la
    #       # 현재 파일 내용 확인
    #       # cat istory-app-deploy.yaml
    #       git config --global user.name 'github-actions[bot]'
    #       git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    #       sed -i "s|newTag:.*|newTag: ${{ env.DOCKER_TAG }}|g" overlay/aws-dev/kustomization.yaml
    #       git commit -am "Update image tag to ${{ env.DOCKER_TAG }}"
    #       git push origin main
    #       # sed -i "s|image: ${{ secrets.DOCKER_USERNAME }}\/istory.*|image: ${{ secrets.DOCKER_USERNAME }}\/istory:${{ env.DOCKER_TAG }}|g" istory-app-deploy.yaml
    #       # 변경된 내용 확인
    #       cat overlay/aws-dev/kustomization.yaml
      
    #   # 변경사항 커밋 및 푸시
    #   # - name: 12.서비스 리포지토리 변경사항 커밋 및 푸시
    #   #   run: |
    #   #     # git config --global user.name 'dangtong76' # 바꾸기
    #   #     # git config --global user.email 'dangtong@gmail.com' # 바꾸기
    #   #     git config --global user.name 'github-actions[bot]'
    #   #     git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    #   #     git commit -am "Update image tag to ${{ env.DOCKER_TAG }}"
    #   #     git remote set-url origin https://${{ secrets.GIT_PAT }}@github.com/dangtong76/istory-platform.git # 바꾸기 
    #   #     git push origin main